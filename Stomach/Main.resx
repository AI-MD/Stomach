<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>